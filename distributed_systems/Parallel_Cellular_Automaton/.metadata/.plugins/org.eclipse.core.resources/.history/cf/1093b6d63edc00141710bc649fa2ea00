import java.util.Arrays;
import java.util.BitSet;

/**
 * Calculates the value of one single cell
 * @author igMoreira
 *
 */
public class Worker {
	

	/**
	 * Calculates the value of a given cell on a position X
	 * using the update rule
	 * 
	 * @param currentState: A byte array holding the current state
	 * @param updateRule: A byte array holding the rule to be applicable
	 * @param position: The position of the cell to calculate
	 * @return: A state with the cell X updated
	 */
	public byte[] calcPositionState(byte[] currentState, byte[] updateRule, int position)
	{
		byte[] copy = Arrays.copyOf(currentState, currentState.length);
		BitSet aux = new BitSet(3);
		
		if(position == 0)
		{
			// First cell
			aux.set(2, ((int)copy[(copy.length-1)%copy.length]) == 1);
			aux.set(1, ((int)copy[position])==1);
			aux.set(0, ((int)copy[(position+1)%copy.length])==1);
		}
		else if( position == (currentState.length-1))
		{
			// last cell
			aux.set(2, ((int)copy[(position-1)%copy.length])==1);
			aux.set(1, ((int)copy[position])==1);
			aux.set(0, ((int)copy[0])==1);
		}
		else
		{
			// cell in the middle
			aux.set(2, ((int)copy[(position-1)%copy.length]) == 1);
			aux.set(1, ((int)copy[position]) == 1);
			aux.set(0, ((int)copy[(position+1)%copy.length]) == 1);
		}
		long test = bitSetToLong(aux);
		copy[position] = updateRule[(int) test];
		
		return copy;
	}
	
	/**
	 * A BitSet is being used to map in the update rule array,
	 * is necessary to convert the bits in integers. The BitSet
	 * will go from 0-7 since the BitSet holds only 3 bits
	 * @param bits
	 * @return
	 */
	public long bitSetToLong(BitSet bits) {
	    long value = 0L;
	    for (int i = 0; i < bits.length(); ++i) {
	      value += bits.get(i) ? (1L << i) : 0L;
	    }
	    return value;
	  }
}
