import java.util.Arrays;

import edu.rit.pj2.Loop;
import edu.rit.pj2.Task;
import edu.rit.pj2.vbl.ByteVbl;


public class ParallelCellularAutomaton extends Task{

	private byte[] updateRule;
	private int smallestPopCounter = Integer.MAX_VALUE;
	private int smallestPopStep = 0;
	private int largestPopCounter = 0;
	private int largestPopStep = 0;
	
	public int getSmallestPopCounter() {
		return smallestPopCounter;
	}

	public int getSmallestPopStep() {
		return smallestPopStep;
	}

	public int getLargestPopCounter() {
		return largestPopCounter;
	}

	public int getLargestPopStep() {
		return largestPopStep;
	}

	public ParallelCellularAutomaton(byte[] updateRule) {
		this.updateRule = updateRule;
	}
	
	public byte[] calcNextState(ByteVbl[] currentState)
	{
		final ByteVbl[] copy = Arrays.copyOf(currentState, currentState.length);
		/*for (int i = 0; i < currentState.length; i++) {
			Worker w = new Worker();
			copy[i] = w.calcPositionState(currentState, updateRule, i)[i];
		}*/
		parallelFor(0, currentState.length).exec(
				new Loop() {
					ByteVbl[] threadLocalVar;
					
					public void start()
					{
						threadLocalVar = threadLocal(copy);
					}
					
					@Override
					public void run(int arg0) throws Exception {
						Worker w = new Worker();
						copy[i] = w.calcPositionState(currentState, updateRule, i)[i];
					}
				}
		);
		int popCounter = getPopCounter(copy);
		if(popCounter > largestPopCounter)
		{
			largestPopCounter = popCounter;
			largestPopStep = CA.getSteps();
		}
		else if(popCounter < smallestPopCounter)
		{
			smallestPopCounter = popCounter;
			smallestPopStep = CA.getSteps();
		}
		
		return copy;
	}
	
	public int getPopCounter(byte[] currentState)
	{
		int popCounter = 0;
		for (int i = 0; i < currentState.length; i++) {
			if(currentState[i] == 1)
				popCounter++;
		}
		return popCounter;
	}

	@Override
	public void main(String[] arg0) throws Exception {
		// TODO Auto-generated method stub
		
	}
}
