import java.util.Arrays;
import java.util.BitSet;


public class Worker {
	

	public byte[] calcPositionState(byte[] currentState, byte[] updateRule, int position)
	{
		byte[] copy = Arrays.copyOf(currentState, currentState.length);
		BitSet aux = new BitSet(3);
		
		if(position == 0)
		{
			// First cell
			aux.set(0, ((int)copy[copy.length-1]) == 1);
			aux.set(1, ((int)copy[position])==1);
			aux.set(2, ((int)copy[position+1])==1);
		}
		else if( position == (currentState.length-1))
		{
			// last cell
			aux.set(0, ((int)copy[position-1])==1);
			aux.set(1, ((int)copy[position])==1);
			aux.set(2, ((int)copy[0])==1);
		}
		else
		{
			// cell in the middle
			aux.set(0, ((int)copy[position-1]) == 1);
			aux.set(1, ((int)copy[position]) == 1);
			aux.set(2, ((int)copy[position+1]) == 1);
		}
		long test = bitSetToInt(aux);
		copy[position] = updateRule[test];
		
		return copy;
	}
	
	public long convert(BitSet bits) {
	    long value = 0L;
	    for (int i = 0; i < bits.length(); ++i) {
	      value += bits.get(i) ? (1L << i) : 0L;
	    }
	    return value;
	  }
}
