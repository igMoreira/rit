import java.util.Arrays;
import java.util.BitSet;


public class Worker {
	

	public byte[] calcPositionState(byte[] currentState, byte[] updateRule, int position)
	{
		byte[] copy = Arrays.copyOf(currentState, currentState.length);
		BitSet aux = new BitSet(3);
		
		if(position == 0)
		{
			// First cell
			aux.set(0, ((int)copy[copy.length-1]) == 1);
			aux.set(1, ((int)copy[position])==1);
			aux.set(2, ((int)copy[position+1])==1);
		}
		else if( position == (currentState.length-1))
		{
			// last cell
			aux.set(0, (int)copy[position-1]);
			aux.set(1, (int)copy[position]);
			aux.set(2, (int)copy[0]);
		}
		else
		{
			// cell in the middle
			aux.set(0, (int)copy[position-1]);
			aux.set(1, (int)copy[position]);
			aux.set(2, (int)copy[position+1]);
		}
		
		copy[position] = updateRule[bitSetToInt(aux)];
		
		return copy;
	}
	
	private int bitSetToInt(BitSet bitSet)
	{
	    int bitInteger = 0;
	    for(int i = 0 ; i < 32; i++)
	        if(bitSet.get(i))
	            bitInteger |= (1 << i);
	    return bitInteger;
	}
}
