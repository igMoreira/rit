import java.util.BitSet;


public class Worker {
	

	public BitSet calcPositionState(byte[] currentState, byte[] updateRule, int position)
	{
		BitSet copy = (BitSet) currentState.clone();
		BitSet aux = new BitSet(3);
		
		if(position == 0)
		{
			// First cell
			aux.set(0, copy.get(copy.length()-1));
			aux.set(1, copy.get(position));
			aux.set(2, copy.get(position+1));
		}
		else if( position == (currentState.length()-1))
		{
			// last cell
			aux.set(0, copy.get(position-1));
			aux.set(1, copy.get(position));
			aux.set(2, copy.get(0));
		}
		else
		{
			// cell in the middle
			aux.set(0, copy.get(position-1));
			aux.set(1, copy.get(position));
			aux.set(2, copy.get(position+1));
		}
		
		copy.set(position,updateRule[bitSetToInt(aux)]);
		
		return copy;
	}
	
	private int bitSetToInt(BitSet bitSet)
	{
	    int bitInteger = 0;
	    for(int i = 0 ; i < 32; i++)
	        if(bitSet.get(i))
	            bitInteger |= (1 << i);
	    return bitInteger;
	}
}
