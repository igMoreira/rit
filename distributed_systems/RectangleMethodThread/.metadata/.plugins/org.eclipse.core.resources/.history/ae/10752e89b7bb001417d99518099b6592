import java.security.InvalidParameterException;
import java.util.Arrays;


/***
 * 
 * @author igMoreira
 *	Will provide the user an executable application, will be responsible
 *	for get the user input and validate it.
 */
public class ComputeArea {

	/***
	 * Executable method
	 * @param args: The user input passed through the command line.
	 * @InvalidParameterException: If the parameters provided by the user are incorrect this execeptionis thrown
	 * 
	 */
	public static void main(String[] args) {
		if(args.length < 5)
		{
			throw new InvalidParameterException("SYNTAX ERROR: The correct syntax is: "
					+ "ComputeArea <threads> <intervals> <start> <end> <function>");
		}
		Integer thread = validateThreadArgument(args[0]);
		Integer interval = validateIntervalsArgument(args[1]);
		Integer[] points = validatePointsArgument(args[2], args[3]);
		Integer[] function = validateFunctionArguments(Arrays.copyOfRange(args, 4, args.length));
		System.out.println("Thread:"+thread);
		System.out.println("Interval:"+interval);
		System.out.println("Point A:"+points[0]);
		System.out.println("Point B"+points[1]);
		for (int i = 0; i < function.length; i++) {
			System.out.println("Function argument:"+function[i]);
		}
	}
	
	/***
	 * Validates the Thread parameter provided by the user.
	 * This parameter is valid only if is a number greater than 0.
	 * 
	 * @return: The value of the Thread parameter in integer type.
	 * @throw InvalidParameterException: If the parameter is invalid an exception is thrown
	 */
	private static Integer validateThreadArgument(String threadParameter)
	{
		Integer val = null;
		try{
			val = Integer.parseInt(threadParameter);
		}
		catch(NumberFormatException e)
		{
			System.out.println("The thread argument must be a number.");
			System.exit(0);
		}
		if(val <= 0)
			System.out.println("PARAMETER ERROR: The thread number must be greater than zero");
		return val;
	}
	
	/***
	 * Vaidates the Intervals parameter provided by the user.
	 * This parameter is valid only if is a number greater than 0.
	 * 
	 * @return: The value of the intevals parameter in Integer type
	 * @throw InvalidParameterException: If the parameter is invalid an exception is thrown
	 */
	private static Integer validateIntervalsArgument(String intervalParameter)
	{
		Integer val = null;
		try{
			val = Integer.parseInt(intervalParameter);
		}
		catch(NumberFormatException e)
		{
			System.out.println("The Interval argument must be a number.");
			System.exit(0);
		}
		if(val <= 0)
		{
			System.out.println("PARAMETER ERROR: The interval number must be greater than zerol");
		}
		return val;
	}
	
	/***
	 * Validates the points provided by the user to calculate the area.
	 * This parameters are valid only if the starting point is smaller than the end point,
	 * and both are numbers.
	 * 
	 * @return: An array of integer containing the points A and B
	 * @throw InvalidParameterException: If the parameter is invalid an exception is thrown
	 */
	private static Integer[] validatePointsArgument(String a, String b)
	{
		Integer points[] = null;
		try{
			points[0] = Integer.parseInt(a);
			points[1] = Integer.parseInt(b);
		}
		catch(NumberFormatException e)
		{
			System.out.println("The Interval argument must be a number.");
			System.exit(0);
		}
		if(points[1] < points[0])
		{
			System.out.println("PARAMETER ERROR: Point B cannot be smaller than point A.");
			System.exit(0);
		}
		return points;
	}
	
	/***
	 * Validates if a function provided by the user is valid.
	 * A function is valid if contains only numbers.
	 * @return: An array of integers containing the values of the function arguments
	 */
	private static Integer[] validateFunctionArguments(String[] function)
	{
		Integer functionValues[] = new Integer[function.length];
		for (int i=0; i< function.length; i++) {
			try{
				functionValues[i] = Integer.parseInt(function[i]);
			}
			catch(NumberFormatException e)
			{
				System.out.println("The function arguments must be only numbers.");
				System.exit(0);
			}
		}
		return functionValues;
	}

}
