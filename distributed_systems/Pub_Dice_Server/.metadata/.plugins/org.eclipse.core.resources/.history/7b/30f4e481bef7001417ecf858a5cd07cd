import java.net.InetAddress;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;


public class MatchManager {

	private static Queue<Player> waitingPlayers = new LinkedList<Player>();
	private static HashMap<String, Match> matches = new HashMap<String, Match>();
	
	public synchronized void joinMatch(String playerName, int port, InetAddress IPAddress)
	{
		Player currentPlayer = new Player(playerName, port, IPAddress);
		if(waitingPlayers.isEmpty())
		{
			currentPlayer.setPlayerNumber(1);
			waitingPlayers.add(currentPlayer);
		}
		else
		{
			currentPlayer.setPlayerNumber(2);
			Player playerONE = waitingPlayers.poll();
			Match match = new Match(playerONE, currentPlayer);
			matches.put(IPAddress+":"+Integer.toString(port), match);
			matches.put(playerONE.getIPAddress()+":"+Integer.toString(playerONE.getPort()), match);
			RequestController controller = new RequestController();
			controller.startMatch(playerONE, currentPlayer);
		}
	}
	
	public synchronized void finishTurn(int port, InetAddress IPAddress)
	{
		String key = IPAddress + ":"+ Integer.toString(port);
		if(matches.containsKey(key))
		{
			Match match = matches.get(key);
			Player currentPlayer = match.getCurrentPlayer();
			Player waitingPlayer = match.getWaitingPlayer();
			RequestController controller = new RequestController();
			controller.score(currentPlayer, waitingPlayer);
			match.updateCurrentPlayer();
			currentPlayer = match.getCurrentPlayer();
			waitingPlayer = match.getWaitingPlayer();
			controller.startTurn(currentPlayer, waitingPlayer);
		}
		
	}
	
	public synchronized void quit(int port, InetAddress IPAddress)
	{
		String key = IPAddress + ":"+ Integer.toString(port);
		if(matches.containsKey(key))
		{
			Match match = matches.get(key);
			Player currentPlayer = match.getCurrentPlayer();
			Player waitingPlayer = match.getWaitingPlayer();
			RequestController controller = new RequestController();
			controller.quit(currentPlayer, waitingPlayer);
		}
	}
	
}
