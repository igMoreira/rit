import java.math.BigInteger;


public class RsaDecrypt {

	public static void main(String[] args) {
		BigInteger modulusAlex = new BigInteger("20261235316692429966211476306362549471506093682029992840015447781642741863340683285578152965965132562487442510291512337597121638880177941391060192709652732798011857471366527816251043522724379237072030275811144619795171666386720515293782747611578416673620193220823122");
		BigInteger exponent = new BigInteger("00814583798327422299459357275061833275785877553372318209186368350743446067813142253154743959220345679845191539288623870806657837784316928726903622851109197866106547809587543125842050506454816679350200735762574385761942557568822832695351200941724985785146530393387378");
		String cipherText = "4904475833351710318199950572004710909236720759579061779448597180284751565354150730493";
		BigInteger modulusBlake = new BigInteger("34438324859418760287250709025951732072939068898250518785808651085339208755175106046559163411215040179657892866632603761497300120559883353961640072653537856774276411008071112201778698280709058724136550507642839900709427567921146143321529143187960762195924559299974210");
		BlockRSA test = new BlockRSA(modulusAlex, exponent);
		String plainText = test.decrypt(cipherText);
		System.out.println(plainText);
	}
	
}
