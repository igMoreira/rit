import java.math.BigInteger;

/**
 * Provides an implementation of the RSA cipher
 * 
 * @author igMoreira
 *
 */
public class RSA {
	private BigInteger modulus;
	private BigInteger exponent;
	private BigInteger unique;
	
	public void setModulus(BigInteger modulus) {
		this.modulus = modulus;
	}

	public void setExponent(BigInteger exponent) {
		this.exponent = exponent;
	}

	/**
	 * Encrypts a given plaintext using the
	 * RSA encryption.
	 * 
	 * @param plainText: 2048-bit block to be encrypted.
	 * @return: 2048-bit block encrypted
	 */
	public BigInteger encrypt(BigInteger plainText)
	{
		return this.modularExponentiation(plainText);
	}
	
	/**
	 * Decrypts a given cipher text using the
	 * RSA decryption.
	 * 
	 * @param cipherText: 2048-bit block to be decrypted.
	 * @return: 2048-bit block decrypted
	 */
	public BigInteger decrypt(BigInteger cipherText)
	{
		this.computeDecryptionExponent();
		return null;
	}
	
	private BigInteger modularExponentiation(BigInteger base)
	{
		return base.modPow(exponent, modulus);
	}
	
	private void computeDecryptionExponent()
	{
		
	}
}
