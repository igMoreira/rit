import java.math.BigInteger;
import java.util.List;

/**
 * Implements a shared factor attack in a RSA
 * cipher.
 * 
 * @author igMoreira
 *
 */
public class SharedFactorAttack implements RsaAttack{

	/**
	 * Execute an attack giving some
	 * group data.
	 * 
	 * @param groups: The list of groups found in the file.
	 */
	@Override
	public void execute(List<Group> groups) {
		for (int i = 0; i < groups.size(); i++) {
			BigInteger decryptionKey;
			if( i == 0)
				decryptionKey = this.computePrivateKey(groups.get(i).getModulus(), groups.get(i).getPublicExpoent(), groups.get(i+1).getModulus());
			BlockRSA block = new BlockRSA(groups.get(i).getModulus(), groups.get(i).getPublicExpoent(),decryptionKey);
			String pt = block.decrypt(groups.get(i).getCipherText());
			System.out.println(pt);
		}
	}
	
	/**
	 * Compute the private key of a group given a modulus A,
	 * a modulus B, and the encryption exponent A.
	 * 
	 * @param modulusAlex: The modulus of the group you wish to compute the private key.
	 * @param encryptionExponentAlex: The public exponent of the group you wish to compute the private key.
	 * @param modulusBlake: The modulus of a group that holds a common prime factor. 
	 * @return: The private key of Alex.
	 */
	private BigInteger computePrivateKey(BigInteger modulusAlex, BigInteger encryptionExponentAlex, BigInteger modulusBlake)
	{
		BigInteger p = modulusAlex.gcd(modulusBlake);
		BigInteger q = modulusAlex.divide(p);
		return encryptionExponentAlex.modInverse(PublicKeyMath.eulerTotient(p, q));
	}

	
}
