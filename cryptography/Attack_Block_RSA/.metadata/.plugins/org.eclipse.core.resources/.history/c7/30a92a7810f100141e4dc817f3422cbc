import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;


public class RsaDecrypt {

	public static void main(String[] args) {
		BufferedReader in = null;
		try {
			FileReader file = new FileReader(args[0]);
			in = new BufferedReader(file);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<Group> groups = new ArrayList<Group>();
		String line;
		Group group = null;
		try {
			for(int i=0; (line = in.readLine()) != null ;i++)
			{
				switch(i%3)
				{
				case 0:
					group = new Group();
					group.setModulus(new BigInteger(line));
					break;
				case 1:
					group.setPublicExpoent(new BigInteger(line));
					break;
				case 2:
					group.setCipherText(new BigInteger(line));
					groups.add(group);
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for (int i = 0; i < groups.size(); i++) {
			int count = ( (i%0) == 0)?i+1:i-1;
			if(i%2==0)
			{
				BlockRSA block = new BlockRSA(groups.get(i).getModulus(), groups.get(i).getPublicExpoent());
				String pt = block.decrypt(groups.get(i).getCipherText(), groups.get(i+1).getModulus());
				System.out.println(pt);
			}
			else
			{
				BlockRSA block = new BlockRSA(groups.get(i).getModulus(), groups.get(i).getPublicExpoent());
				String pt = block.decrypt(groups.get(i).getCipherText(), groups.get(i-1).getModulus());
				System.out.println(pt);
			}
		}
		
	}
	
}
