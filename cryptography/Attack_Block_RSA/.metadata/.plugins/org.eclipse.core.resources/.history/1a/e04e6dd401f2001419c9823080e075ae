import java.math.BigInteger;
import java.util.List;

/**
 * Implements a shared factor attack in a RSA
 * cipher.
 * 
 * @author igMoreira
 *
 */
public class SharedFactorAttack implements RsaAttack{

	/**
	 * Execute an attack giving some
	 * group data.
	 * 
	 */
	@Override
	public void execute(List<Group> groups) {
		for (int i = 0; i < groups.size(); i++) {
			int count = ( (i%2) == 0)?i+1:i-1;
			BigInteger decryptionKey = this.computePrivateKey(groups.get(i).getModulus(), groups.get(i).getPublicExpoent(), groups.get(count).getModulus());
			BlockRSA block = new BlockRSA(groups.get(i).getModulus(), groups.get(i).getPublicExpoent(),decryptionKey);
			String pt = block.decrypt(groups.get(i).getCipherText());
			System.out.println(pt);
		}
	}
	
	private BigInteger computePrivateKey(BigInteger modulusAlex, BigInteger encryptionExponentAlex, BigInteger modulusBlake)
	{
		BigInteger p = modulusAlex.gcd(modulusBlake);
		BigInteger q = modulusAlex.divide(p);
		return encryptionExponentAlex.modInverse(PublicKeyMath.eulerTotient(p, q));
	}

	
}
