import java.math.BigDecimal;
import java.math.BigInteger;

import edu.rit.util.Packing;

public class Ark3 {
	 private byte[] keyState = new byte[16];
	 private final int numRounds = 27;
	 private final int blockSize = 8; // blocks in bytes
	 
	 public Ark3(byte[] key) {
		this.keyState = key;
	}
	 
	 public byte[] execute(byte[] text) {
		return Ark3Cipher(text); // text is equals the IV for the first round or the cipherText for the next rounds
	 }
	 
	 private byte[] Ark3Cipher(byte[] state)
	 {
		for (int i = 0; i < 27; i++) {
			byte[] subkey = generateSubkey(); // needs to know the input of the subkey generator
			for (int j = 0; j < subkey.length; j++) {
				state[j] = (byte) (state[j] ^ subkey[j]);
			}
			//state = mix(permutation(state));
		}
		return state;
	 }
	 
	 private byte[] generateSubkey()
	 {
		 // ROTATE 29 bits right
		 int[] rotl = new int[4];
		 Packing.packIntLittleEndian(keyState, 0, rotl, 0, 4);
//		 System.out.println(keyState.length);
		 for (int i = 0; i < rotl.length; i++) {
			System.out.println(rotl[i]);
		}
		 long test = Packing.packLongLittleEndian(rotl, 1);  //CAUTION NOT SURE IF IT IS RIGHT
		 Long.rotateRight(test, 29);
		 
		 // Divide in 8-bit bytes
		 
		 return new byte[1];
	 }
	 
	 private byte[] permutation(byte[] state)
	 {
		 throw new UnsupportedOperationException("Not implemented yet");
	 }
	 
	 private byte[] mix(byte[] state)
	 {
		 throw new UnsupportedOperationException("Not implemented yet");
	 }
	 
}
