import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;

import edu.rit.util.Hex;

/***
 * 
 * @author igMoreira
 *	Offers an application to decrypt files using ARK3 in CFB mode
 */
public class Decrypt {
	
	/***
	 * The main method responsible for execute the Decrypt application.
	 * 
	 * @param args: Holds the user parameters in the command line.
	 * 
	 * @InvalidParameterException: If the user provides the incorrect parameter this exception is thrown
	 * @RuntimeException: If the plain text file provided does not exist or cannot be openned this exception occurs.
	 * @IOException: If a cypher text file cannot be created this exception occurs.
	 * @FileNotFoundException: If is not possible to read or write in the file this exception occurs.
	 */
	public static void main(String[] args) {
		if(args.length != 4)
		{
			System.out.println("SYNTAX ERROR: Parameters invalid.\n Correct call: java Encrypt <ctfile> <ptfile> <key> <iv>");
			System.exit(0);
		}
		
		File plainTextFile = new File(args[1]);
		File cypherTextFile = new File(args[0]);
		if (!cypherTextFile.exists() || !cypherTextFile.isFile()) {
			System.out.println("FILE ERROR: Cipher text file doesn't exist or cannot be accessed.");
			System.out.println("Try inserting the full path of the file.");
			System.exit(0);
		}
		if(!plainTextFile.exists() || !plainTextFile.isFile())
		{
			try {
				plainTextFile.createNewFile();
			} catch (IOException e) {
				System.out.println("FILE ERROR: Error trying to create a new file for the plainText, please verify your previleges.");
				System.exit(1);
			}
		}
		Ark3CFB cypher;
		try {
			cypher = new Ark3CFB(validateKey(args[2]));
			StringBuilder builder = new StringBuilder();
			Scanner scan = new Scanner(cypherTextFile);
			while(scan.hasNextLine())
			{
				builder.append(scan.nextLine());
			}
			scan.close();
			String content = builder.toString();
			PrintWriter out = new PrintWriter(plainTextFile);
			byte[] result = cypher.decrypt(validateFileContent(content), validateIV(args[3]));
			try {
				out.print(new String(result, "UTF-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			out.close();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}	
	}
	
	/***
	 * Responsible for verifying if a the key provided by the user
	 * avails with the ark3 requirements
	 * 
	 * @param key: String provided by the user
	 * @return: A 128-bit byte array containing the key
	 */
	private static byte[] validateKey(String key)
	{
		byte[] convertedKey = new byte[16];
		if(key.length() != 32)
		{
			System.out.println("KEY ERROR: Key must be 32 Hexadecimal digits");
			System.exit(2);
		}
		try{
			convertedKey = Hex.toByteArray(key);
		}
		catch(Exception e)
		{
			System.out.println("KEY ERROR: Key must contain only valid Hexadecimal digits");
			System.exit(1);
		}
		return convertedKey;
	}
	
	/***
	 * Responsible for verifying if the IV provided by the user
	 * avails with the ark3 requirements
	 * 
	 * @param IV: String provided by the user
	 * @return: A 64-bit byte array containing the IV
	 */
	private static byte[] validateIV(String IV)
	{
		byte[] convertedIV = new byte[8];
		if(IV.length() != 16)
		{
			System.out.println("IV ERROR: IV must be 16 Hexadecimal digits");
			System.exit(2);
		}
		try{
			convertedIV = Hex.toByteArray(IV);
		}
		catch(Exception e)
		{
			System.out.println("IV ERROR: IV must contain only valid Hexadecimal digits");
			System.exit(1);
		}
		return convertedIV;
	}
	
	/***
	 * Responsible for converting a given cipher text to an array
	 * containing the hex code of the characters.
	 * 
	 * @return: A byte array containing the text of the file
	 */
	private static byte[] validateFileContent(String content)
	{
		byte[] convertedContent = new byte[1];
		try{
			content = content.trim();
			content = content.replace(" ", "");
			convertedContent = Hex.toByteArray(content);
		}
		catch(Exception e)
		{
			System.out.println("FILE ERROR: Error trying to convert cipher text file to hex");
			System.exit(3);
		}
		return convertedContent;
	}
}
