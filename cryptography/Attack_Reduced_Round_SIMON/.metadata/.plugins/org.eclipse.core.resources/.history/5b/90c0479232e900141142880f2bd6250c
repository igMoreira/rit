import java.util.List;
import edu.rit.util.Hex;


/**
 * Provides an application that performs an known plaintext attack
 * in the cipher SIMON 48/96
 * 
 * @author igMoreira
 *
 */
public class CrackSimon {

	/**
	 * MAIN method
	 * 
	 * @param args: user inputed data pt/ct pairs
	 */
	public static void main(String[] args) {
		usage(args);
		test();
	/*	byte[][] ptSet = new byte[args.length/2][3];
		byte[][] ctSet = new byte[args.length/2][3];
		
		for (int i = 0, j=0; j < args.length; i++, j+=2) {
			try{
				ptSet[i] = Hex.toByteArray(args[j]);
			}
			catch(Exception e)
			{
				System.out.printf("Not a valid Hex character in the input %s\n",args[j]);
				System.exit(2);
			}
			try{
				ctSet[i] = Hex.toByteArray(args[j+1]);
			}
			catch(Exception e)
			{
				System.out.printf("Not a valid Hex character in the input %s\n",args[j+1],j);
				System.exit(3);
			}
		}
		
		MitmAttackSimon attack = new MitmAttackSimon(ptSet, ctSet);
		List<byte[]> result = attack.execute();
		System.out.printf("%s\t%s\t%s\n",
				Hex.toString(result.get(0)).toUpperCase(),
				Hex.toString(result.get(1)).toUpperCase(),
				Hex.toString(result.get(2)).toUpperCase());*/
	}
	
	/**
	 * Validate the application syntax and the user inputed data
	 * @param args
	 */
	private static void usage(String[] args)
	{
		if(args.length == 0)
		{
			System.out.println("There must be one or more (plaintext, ciphertext) pairs.");
			System.out.println("java CrackSimon <pt1> <ct1> [<pt2> <ct2> ...]");
			System.exit(0);
		}
		if(args.length%2 != 0)
		{
			System.out.println("The input should be given as pairs pt/ct");
			System.out.println("java CrackSimon <pt1> <ct1> [<pt2> <ct2> ...]");
			System.exit(1);
		}
	}
	
	private static void test()
	{
		    
		SimonCipher oracle = new SimonCipher();
		byte[] pt = Hex.toByteArray("1D6B6CBDDFE0");
		byte[] sub1 = Hex.toByteArray("7E799E");
		byte[] sub2 = Hex.toByteArray("0F65B9");
		byte[] sub3 = Hex.toByteArray("8DEAB8");
		byte[] result = new byte[pt.length]; 
		for (int i = 0; i < 3; i++) {
			switch(i)
			{
			case 0:
				result = oracle.encrypt(sub1, pt);
				System.out.println(Hex.toString(result));
				break;
			case 1:
				result = oracle.encrypt(sub2, result);
				break;
			case 2:
				result = oracle.encrypt(sub3, result);
				break;
			}
		}
	}
}
