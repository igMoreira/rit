import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.List;
import java.util.Random;

import edu.rit.util.Hex;
import edu.rit.util.Packing;


/**
 * Implements a known plaintext attack in SIMON 48/96
 * the attack used was the meet in the middle attack
 * divided in two parts, the bottom up and the top down
 * 
 * @author igMoreira
 *
 */
public class MitmAttackSimon {
	
	private SimonCipher oracle = new SimonCipher(); // SIMON 48/96 oracle
	private List<byte[]> subkeys = new ArrayList<byte[]>(); // used to store the three subkeys guessed as a result of the attack
	private SubkeyGuessTable subkeyTable = new SubkeyGuessTable(); // used to store the results of the bottom up part
	private int counter = 3; // used to control wich byte is being guessed in the subkey
	private byte[][] pt; // set of all plaintext provided by the user
	byte[][] ct; // set of all ciphertext provided by the user
	Hashtable<String, Integer> table = new Hashtable<String, Integer>();
	/**
	 * Constructor
	 * 
	 * @param pt: set of all plaintext provided by the user
	 * @param ct: set of all ciphertext provided by the user
	 */
	public MitmAttackSimon(byte[][] pt, byte[][] ct) {
		this.pt = pt;
		this.ct = ct;
	}
	
	/**
	 * Meet in the middle execution command
	 * @return: list of the subkeys for the three rounds
	 */
	public List<byte[]> execute()
	{
		subkeys.add(new byte[3]);
		subkeys.add(new byte[3]);
		subkeys.add(new byte[3]);
/*		while(counter <= 5)
		{
			topDown(pt[0],ct[0]);		
			counter++;
		}*/
		bottomUp(pt[0]);
//		topDown(pt[0],ct[0]);

		return subkeys;
	}

	/**
	 * The bottom up part of the meet in the middle attack
	 * decrypts the ciphertext using byte guesses to subkeys
	 * of round 3 and 2, collects the results and store in
	 * a hash table
	 * 
	 * @param ct: cipher text to be decrypted
	 */
	private void bottomUp(byte[] pt, byte[] ct)
	{
		byte[] aux = new byte[6];
		byte[] sub1 = new byte[3];
		byte[] result = new byte[pt.length];
		System.out.println("C");
		Random rand = new Random();
		String compare = Hex.toString(Arrays.copyOfRange(pt, 3, 6));
		while(true)
		{
			sub1 = Hex.toByteArray("3E4629");
			byte[] rotated = oracle.rotatePart(Arrays.copyOfRange(pt, 0, 3));
			
			aux = oracle.encrypt(sub1, pt);
			
			byte[] sub2 = new byte[3];
			
			rotated = oracle.rotatePart(Arrays.copyOfRange(aux, 0, 3));
			
			rotated[0] = (byte) (rotated[0] ^ aux[3]);
			rotated[1] = (byte) (rotated[1] ^ aux[4]);
			rotated[2] = (byte) (rotated[2] ^ aux[5]);
			
			sub2[0] = (byte) (rotated[0] ^ ct[0]);
			sub2[1] = (byte) (rotated[1] ^ ct[1]);
			sub2[2] = (byte) (rotated[2] ^ ct[2]);
			
			aux = oracle.encrypt(subkey, plainText)
			
		}
	}

	/**
	 * Implements the top down part of the meet in the middle attack
	 * encrypts the text using byte guess of the subkey of round 1 till
	 * the middle point. If the value of the result match with the bottom
	 * up result a test is performed to verify if it happens in all pt/ct
	 * pairs.
	 * 
	 * @param pt: plaintext to encrypt
	 */
	private void topDown(byte[] pt, byte[] ct)
	{
		byte[] aux = new byte[6];
		byte[] sub2 = new byte[3];
		byte[] result = new byte[pt.length];
		System.out.println("A");
		Random rand = new Random();
		while(true)
		{
			aux[3] = pt[0];
			aux[4] = pt[1];
			aux[5] = pt[2];
			
			// guess subkey 2
			/*sub2[0] = (byte) rand.nextInt(256);
			sub2[1] = (byte) rand.nextInt(256);
			sub2[2] = (byte) rand.nextInt(256);
			if(table.containsKey(Hex.toString(sub2)))
			{
				continue;
			}
			table.put(Hex.toString(sub2), 0);*/
			sub2 = Hex.toByteArray("6D662A");
			
			aux[0] = (byte) (sub2[0] ^ ct[3]);
			aux[1] = (byte) (sub2[1] ^ ct[4]);
			aux[2] = (byte) (sub2[2] ^ ct[5]);
			
			aux[0] = (byte) (aux[0] ^ pt[0]);
			aux[1] = (byte) (aux[1] ^ pt[1]);
			aux[2] = (byte) (aux[2] ^ pt[2]);
			System.out.println(Hex.toString(aux));
			result = oracle.encrypt(sub2, aux);
			if(result[0] == ct[3] && result[1] == ct[4] && result[2] == ct[5])
			{
				System.out.println(Hex.toString(sub2));
				System.out.println(Hex.toString(result));
				System.out.println();
				// Calculate subkey 1 by using subkey 2 guess
				byte[] rotate = oracle.rotatePart(Arrays.copyOfRange(pt, 0, 3));
				rotate[0] = (byte) (rotate[0] ^ pt[3]);
				rotate[1] = (byte) (rotate[1] ^ pt[4]);
				rotate[2] = (byte) (rotate[2] ^ pt[5]);
				
				byte[] sub1 = new byte[3];
				
				sub1[0] = (byte) (rotate[0] ^ result[3]);
				sub1[1] = (byte) (rotate[0] ^ result[4]);
				sub1[2] = (byte) (rotate[0] ^ result[5]);
				
				//Calculate subkey 3 by using subkey 2 guess
				oracle.rotatePart(Arrays.copyOfRange(result, 0, 3));
				rotate[0] = (byte) (rotate[0] ^ result[3]);
				rotate[1] = (byte) (rotate[1] ^ result[4]);
				rotate[2] = (byte) (rotate[2] ^ result[5]);
				
				byte[] sub3 = new byte[3];
				
				sub3[0] = (byte) (rotate[0] ^ ct[0]);
				sub3[1] = (byte) (rotate[0] ^ ct[1]);
				sub3[2] = (byte) (rotate[0] ^ ct[2]);

				// Verify if those are the correct subkeys for all pt/ct pairs
				boolean status = true;
				for(int i=0; i<this.pt.length && status; i++)
				{
					for (int j = 0; j < 3; j++) {
						switch(j)
						{
						case 0:
							result = oracle.encrypt(sub1, this.pt[i]);
							break;
						case 1:
							result = oracle.encrypt(sub2, result);
							break;
						case 2:
							result = oracle.encrypt(sub3, result);
							break;
						}
					}
					status = (Hex.toString(result).equalsIgnoreCase(Hex.toString(this.ct[i])));
				}
				// If it is true the keys are right
				if(status)
				{
					System.out.println(Hex.toString(sub1));
					System.out.println(Hex.toString(sub2));
					System.out.println(Hex.toString(sub3));
					break;
				}
				
			}
		}
	}
	
	/**
	 * Tests wether the byte in position index of the subkeys produces the
	 * expected result.
	 * 
	 * @param sub1: sub key of the first round
	 * @param sub2: sub key of the second round
	 * @param sub3: sub key of the third round
	 * @param pt: plaintext
	 * @param ct: ciphertext of the plaintext above using SIMON 48/96
	 * @param index: The index represents the byte of the keys that are being guessed
	 * @return: true if the guess worked for the three rounds and false if the result is different to the ciphertext
	 */
	public boolean encryptTest(byte[] sub1, byte[] sub2, byte[] sub3, byte[] pt, byte[] ct, int index)
	{
		byte[] result = new byte[pt.length]; 
		for (int i = 0; i < 3; i++) {
			switch(i)
			{
			case 0:
				result = oracle.encrypt(sub1, pt);
				break;
			case 1:
				result = oracle.encrypt(sub2, result);
				break;
			case 2:
				result = oracle.encrypt(sub3, result);
				break;
			}
		}
		return (ct[index] == result[index]);
	}


}