import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.List;

import edu.rit.util.Hex;
import edu.rit.util.Packing;


/**
 * Implements a known plaintext attack in SIMON 48/96
 * the attack used was the meet in the middle attack
 * divided in two parts, the bottom up and the top down
 * 
 * @author igMoreira
 *
 */
public class MitmAttackSimon {
	
	private SimonCipher oracle = new SimonCipher(); // SIMON 48/96 oracle
	private List<byte[]> subkeys = new ArrayList<byte[]>(); // used to store the three subkeys guessed as a result of the attack
	private byte[][] pt; // set of all plaintext provided by the user
	byte[][] ct; // set of all ciphertext provided by the user
	Hashtable<String, Integer> table = new Hashtable<String, Integer>();
	/**
	 * Constructor
	 * 
	 * @param pt: set of all plaintext provided by the user
	 * @param ct: set of all ciphertext provided by the user
	 */
	public MitmAttackSimon(byte[][] pt, byte[][] ct) {
		this.pt = pt;
		this.ct = ct;
	}
	
	/**
	 * Meet in the middle execution command
	 * @return: list of the subkeys for the three rounds
	 */
	public List<byte[]> execute()
	{
		bottomUp(pt[0], ct[0]);

		return subkeys;
	}

	/**
	 * The bottom up part of the meet in the middle attack
	 * decrypts the ciphertext using byte guesses to subkeys
	 * of round 3 and 2, collects the results and store in
	 * a hash table
	 * 
	 * @param ct: cipher text to be decrypted
	 */
	private void bottomUp(byte[] pt, byte[] ct)
	{
		byte[] aux = new byte[6];
		byte[] sub1 = new byte[3];
		byte[] result = new byte[pt.length];
		for(int guess = 0x00; guess <= 0xFFFFFF; guess++)
		{
			byte[] unpacked = new byte[4];
			Packing.unpackIntBigEndian(guess, unpacked, 0);
			System.arraycopy(unpacked, 1, sub1, 0, 3);
			byte[] rotated = oracle.rotatePart(Arrays.copyOfRange(pt, 0, 3));
			
			aux = oracle.encrypt(sub1, pt);
			
			byte[] sub2 = new byte[3];
			
			rotated = oracle.rotatePart(Arrays.copyOfRange(aux, 0, 3));
			
			rotated[0] = (byte) (rotated[0] ^ aux[3]);
			rotated[1] = (byte) (rotated[1] ^ aux[4]);
			rotated[2] = (byte) (rotated[2] ^ aux[5]);
			
			sub2[0] = (byte) (rotated[0] ^ ct[3]);
			sub2[1] = (byte) (rotated[1] ^ ct[4]);
			sub2[2] = (byte) (rotated[2] ^ ct[5]);
			
			aux = oracle.encrypt(sub2, aux);
			
			byte[] sub3 = new byte[3];
			
			rotated = oracle.rotatePart(Arrays.copyOfRange(aux, 0, 3));
			
			rotated[0] = (byte) (rotated[0] ^ aux[3]);
			rotated[1] = (byte) (rotated[1] ^ aux[4]);
			rotated[2] = (byte) (rotated[2] ^ aux[5]);
			
			sub3[0] = (byte) (rotated[0] ^ ct[0]);
			sub3[1] = (byte) (rotated[1] ^ ct[1]);
			sub3[2] = (byte) (rotated[2] ^ ct[2]);
			
			boolean status = true;
			for(int i=0; i<this.pt.length && status; i++)
			{
				for (int j = 0; j < 3; j++) {
					switch(j)
					{
					case 0:
						result = oracle.encrypt(sub1, this.pt[i]);
						break;
					case 1:
						result = oracle.encrypt(sub2, result);
						break;
					case 2:
						result = oracle.encrypt(sub3, result);
						break;
					}
				}
				status = (Hex.toString(result).equalsIgnoreCase(Hex.toString(this.ct[i])));
			}
			
			// If it is true the keys are right
			if(status)
			{
				subkeys.add(sub1);
				subkeys.add(sub2);
				subkeys.add(sub3);
				break;
			}
		}
	}
	
	/**
	 * Tests wether the byte in position index of the subkeys produces the
	 * expected result.
	 * 
	 * @param sub1: sub key of the first round
	 * @param sub2: sub key of the second round
	 * @param sub3: sub key of the third round
	 * @param pt: plaintext
	 * @param ct: ciphertext of the plaintext above using SIMON 48/96
	 * @param index: The index represents the byte of the keys that are being guessed
	 * @return: true if the guess worked for the three rounds and false if the result is different to the ciphertext
	 */
	public boolean encryptTest(byte[] sub1, byte[] sub2, byte[] sub3, byte[] pt, byte[] ct, int index)
	{
		byte[] result = new byte[pt.length]; 
		for (int i = 0; i < 3; i++) {
			switch(i)
			{
			case 0:
				result = oracle.encrypt(sub1, pt);
				break;
			case 1:
				result = oracle.encrypt(sub2, result);
				break;
			case 2:
				result = oracle.encrypt(sub3, result);
				break;
			}
		}
		return (ct[index] == result[index]);
	}


}