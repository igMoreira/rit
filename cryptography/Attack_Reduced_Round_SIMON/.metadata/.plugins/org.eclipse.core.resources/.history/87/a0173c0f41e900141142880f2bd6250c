import edu.rit.util.Packing;


/**
 * Provides a SIMON 48/96 implementation without the
 * key scheduler.
 * 
 * @author igMoreira
 *
 */
public class SimonCipher {

	/**
	 * Encrypts a given plaintext using one round of SIMON 48/96
	 * the subkey must b provided by the user
	 * 
	 * @param subkey: subkey to be used in the round
	 * @param plainText: plaintext to be encrypted
	 * @return: the encrypted text
	 */
	public byte[] encrypt(byte[] subkey, byte[] plainText)
	{
		byte[] pt1 = new byte[4];
		byte[] pt2 = new byte[4];
		System.arraycopy(plainText, 0, pt1, 1, 3);
		System.arraycopy(plainText, 3, pt2, 1, 3);
		int packedPt1 = 0;
		packedPt1 = Packing.packIntBigEndian(pt1, 0);
		
		// rotates 1,8,2
		int rotate1 = (packedPt1 << 1) | (packedPt1 >>> (24 - 1));
		int rotate2 = (packedPt1 << 8) | (packedPt1 >>> (24 - 8));
		int rotate3 = (packedPt1 << 2) | (packedPt1 >>> (24 - 2));

		// and between the rotates and xor
		int result = (rotate1 & rotate2)^rotate3;
		byte[] unpacked = new byte[4];
		
		Packing.unpackIntBigEndian(result, unpacked, 0);
		
		// xor with S-box
		pt2[0] = (byte) ((pt2[0] ^ unpacked[0]));
		pt2[1] = (byte) ((pt2[1] ^ unpacked[1]));
		pt2[2] = (byte) ((pt2[2] ^ unpacked[2]));
		pt2[3] = (byte) ((pt2[3] ^ unpacked[3]));
		
		// xor with subkey
		pt2[0+1] = (byte) ((pt2[0+1] ^ subkey[0]));
		pt2[1+1] = (byte) ((pt2[1+1] ^ subkey[1]));
		pt2[2+1] = (byte) ((pt2[2+1] ^ subkey[2]));
		
		// reversed order of halves
		byte[] aux = new byte[6];
		System.arraycopy(pt1, 1, aux, 3, 3);
		System.arraycopy(pt2, 1, aux, 0, 3);
		return aux;
	}
	
	/**
	 * Decrypts a given ciphertext using one round of SIMON 48/96
	 * the subkey must b provided by the user
	 * 
	 * @param subkey: subkey to be used in the round
	 * @param plainText: ciphertext to be decrypted
	 * @return: the decrypted text
	 */
	public byte[] decrypt(byte[] subkey, byte[] plainText)
	{
		byte[] pt1 = new byte[4];
		byte[] pt2 = new byte[4];
		System.arraycopy(plainText, 0, pt1, 1, 3);
		System.arraycopy(plainText, 3, pt2, 1, 3);
		int packedPt2 = 0;
		packedPt2 = Packing.packIntBigEndian(pt2, 0);
		
		// rotates 1,8,2
		int rotate1 = (packedPt2 << 1) | (packedPt2 >>> (24 - 1));
		int rotate2 = (packedPt2 << 8) | (packedPt2 >>> (24 - 8));
		int rotate3 = (packedPt2 << 2) | (packedPt2 >>> (24 - 2));

		// and between the rotates and xor
		int result = (rotate1 & rotate2)^rotate3;
		byte[] unpacked = new byte[4];
		
		Packing.unpackIntBigEndian(result, unpacked, 0);
		
		// xor with S-box
		pt1[0] = (byte) ((pt1[0] ^ unpacked[0]));
		pt1[1] = (byte) ((pt1[1] ^ unpacked[1]));
		pt1[2] = (byte) ((pt1[2] ^ unpacked[2]));
		pt1[3] = (byte) ((pt1[3] ^ unpacked[3]));
		
		// xor with subkey
		pt1[0+1] = (byte) ((pt1[0+1] ^ subkey[0]));
		pt1[1+1] = (byte) ((pt1[1+1] ^ subkey[1]));
		pt1[2+1] = (byte) ((pt1[2+1] ^ subkey[2]));
		
		// reversed order of halves
		byte[] aux = new byte[6];
		System.arraycopy(pt1, 1, aux, 3, 3);
		System.arraycopy(pt2, 1, aux, 0, 3);
		return aux;
	}
	
	public byte[] rotatePart(byte[] text)
	{
		byte[] pt = new byte[4];
		System.arraycopy(text, 0, pt, 1, 3);
		int packedPt2 = 0;
		packedPt2 = Packing.packIntBigEndian(pt, 0);
		
		// rotates 1,8,2
		int rotate1 = (packedPt2 << 1) | (packedPt2 >>> (24 - 1));
		int rotate2 = (packedPt2 << 8) | (packedPt2 >>> (24 - 8));
		int rotate3 = (packedPt2 << 2) | (packedPt2 >>> (24 - 2));

		// and between the rotates and xor
		int result = (rotate1 & rotate2)^rotate3;
		byte[] unpacked = new byte[4];
		Packing.unpackIntBigEndian(result, unpacked, 0);
		
		
		
	}
}
