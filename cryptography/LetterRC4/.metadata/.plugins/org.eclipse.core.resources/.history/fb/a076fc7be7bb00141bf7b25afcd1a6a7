import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.InvalidKeyException;
import java.security.InvalidParameterException;
import java.util.Scanner;

/***
 * 
 * @author igMoreira
 *	Concrete class of the LetterRC4 interface, defines the encrypt operation.
 *	This is an executable class so holds a main method. This class also implements
 *	the operationFormula which holds the formula to encrypt in Letter-RC4.
 */
public class Encrypt extends LetterRC4 {

	/***
	 * The constructor is redefined to create objects just when the key is
	 * provided.
	 * 
	 * @param key: The key used to encrypt a text
	 * @throws InvalidKeyException: If the key contains not valid
	 * characters a exception is thrown and execution interrupted.
	 */
	public Encrypt(String key) throws InvalidKeyException {
		super(key);
	}
	
	/***
	 * The main method responsible for execute the Encrypt application.
	 * 
	 * @param args: Holds the user parameters in the command line.
	 * 
	 * @InvalidParameterException: If the user provides the incorrect parameter this exception is thrown
	 * @RuntimeException: If the plain text file provided does not exist or cannot be openned this exception occurs.
	 * @IOException: If a cypher text file cannot be created this exception occurs.
	 * @InvalidKeyException: If the key is not valid this exception occurs.
	 * @FileNotFoundException: If is not possible to read or write in the file this exception occurs.
	 */
	public static void main(String[] args) {
		
		if(args.length != 3)
		{
			throw new InvalidParameterException("SYNTAX ERROR: Parameters invalid.\n Correct call java Encrypt <key> <ptfile> <ctfile>");
		}
		File plainTextFile = new File(args[1]);
		File cypherTextFile = new File(args[2]);
		if (!plainTextFile.exists() || !plainTextFile.isFile()) {
			throw new RuntimeException("FILE ERROR: Plain text file doesn't exist or cannot be accessed.");
		}
		if(!cypherTextFile.exists() || !cypherTextFile.isFile())
		{
			try {
				cypherTextFile.createNewFile();
			} catch (IOException e) {
				System.out.println("FILE ERROR: Error trying to create a new file for the cypherText, please verify your previleges.");
			}
		}
		LetterRC4 cypher;
		try {
			cypher = new Encrypt(args[0]);
			StringBuilder builder = new StringBuilder();
			Scanner scan = new Scanner(plainTextFile);
			while(scan.hasNextLine())
			{
				builder.append(scan.nextLine());
			}
			scan.close();
			String content = builder.toString();
			PrintWriter out = new PrintWriter(cypherTextFile);
			out.print(cypher.execute(content));
			out.close();
			
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
	}
	
	/***
	 * Implements the abstract method of the LetterRC4 abstract class,
	 * each operation (encrypt/decrypt) hsa got its own formula to calculate
	 * a bit.
	 */
	@Override
	protected byte operationFormula(int a, int b) {
		return (byte) ((a + b ) % 26);
	}

}
